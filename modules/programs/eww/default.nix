{ config, lib, pkgs, ... }:

let
  ewwWayland = pkgs.callPackage ./eww-wayland.nix { };
  
  # Detectar automáticamente todos los scripts en la carpeta scripts/
  scriptsDir = ./bar/scripts;
  scriptFiles = builtins.attrNames (builtins.readDir scriptsDir);
  
  # Función para crear la configuración de un script
  makeScriptConfig = scriptName: {
    name = ".config/eww/bar/scripts/${scriptName}";
    value = {
      text = builtins.readFile (scriptsDir + "/${scriptName}");
      executable = true;
    };
  };
  
  # Generar configuraciones para todos los scripts
  scriptConfigs = builtins.listToAttrs (map makeScriptConfig scriptFiles);
  
  # Función para copiar archivos del directorio raíz eww/
  makeRootFileConfig = fileName: {
    name = ".config/eww/${fileName}";
    value = {
      source = ./${fileName};
    };
  };
  
  # Función para copiar archivos del directorio bar/
  makeBarFileConfig = fileName: {
    name = ".config/eww/bar/${fileName}";
    value = {
      source = ./bar + "/${fileName}";
    };
  };
  
  # Detectar automáticamente todos los archivos en el directorio bar/
  barDir = ./bar;
  barDirContents = builtins.readDir barDir;
  
  # Filtrar solo archivos (no directorios) del directorio bar/, excluyendo bar.yuck
  barFiles = builtins.filter 
    (name: 
      (builtins.getAttr name barDirContents) == "regular" && 
      name != "bar.yuck"
    )
    (builtins.attrNames barDirContents);
  
  # Obtener solo archivos .yuck (excluyendo bar.yuck) para los includes
  yuckModules = builtins.filter 
    (name: lib.hasSuffix ".yuck" name && name != "bar.yuck")
    barFiles;
  
  # Generar líneas de include para cada módulo .yuck
  generateIncludes = modules:
    lib.concatMapStringsSep "\n" 
      (module: "(include \"${config.xdg.configHome}/eww/bar/${module}\")")
      modules;
  
  # Lista de archivos principales en eww/
  rootFiles = [
    "eww.yuck"
    "eww.scss"
  ];
  
  # Generar configuraciones para archivos del directorio raíz
  rootFileConfigs = builtins.listToAttrs (map makeRootFileConfig rootFiles);
  
  # Generar configuraciones para archivos del directorio bar (dinámicamente)
  barFileConfigs = builtins.listToAttrs (map makeBarFileConfig barFiles);
in
{
  programs.eww = {
    enable = true;
    package = ewwWayland;
    enableZshIntegration = true;
  };

  home.file = {
    ".local/bin/eww" = {
      source = "${ewwWayland}/bin/eww";
    };

    # Copiar carpeta de imágenes si existe
    ".config/eww/bar/images" = {
      source = ./bar/images;
      recursive = true;
    };
    
    # Generar bar.yuck dinámicamente con rutas absolutas
    ".config/eww/bar/bar.yuck" = {
      text = ''
        ;; EWW Bar Configuration - Cyberpunk Purple Theme
        ;; Modular Structure
        ;; Auto-generated by Nix

        ;; Import all modules
        ${generateIncludes yuckModules}
      '';
    };
  } // rootFileConfigs // barFileConfigs // scriptConfigs;

  systemd.user.services.eww = {
    Unit = {
      Description = "Eww Wayland Daemon";
      After = [ "graphical-session.target" ];
    };
    Service = {
      ExecStart = "${ewwWayland}/bin/eww -c ${config.xdg.configHome}/eww daemon";
      Restart = "on-failure";
    };
    Install = {
      WantedBy = [ "default.target" ];
    };
  };
}
